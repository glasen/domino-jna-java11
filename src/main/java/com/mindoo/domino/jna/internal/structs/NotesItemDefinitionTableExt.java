package com.mindoo.domino.jna.internal.structs;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.mindoo.domino.jna.internal.NotesConstants;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NotesItemDefinitionTableExt extends BaseStructure {
	/** number of items in the table */
	public int Items;
	/**
	 * Memory handle of ITEM_DEFINITION_EXT<br>
	 * structures
	 */
	public int ItemDefArray;
	/**
	 * Number of non-null segments in<br>
	 * ItemNameSegs
	 */
	public int NumSegments;
	/**
	 * Segments of<br>
	 * packed text<br>
	 * C type : DHANDLE[MAX_ITEMDEF_SEGMENTS]
	 */
	public int[] ItemNameSegs = new int[NotesConstants.MAX_ITEMDEF_SEGMENTS];
	/**
	 * Length of<br>
	 * each non-null text segment<br>
	 * C type : DWORD[MAX_ITEMDEF_SEGMENTS]
	 */
	public int[] ItemNameSegLengths = new int[NotesConstants.MAX_ITEMDEF_SEGMENTS];
	
	public NotesItemDefinitionTableExt() {
		super();
	}
	
	public static NotesItemDefinitionTableExt newInstance() {
		return AccessController.doPrivileged(new PrivilegedAction<NotesItemDefinitionTableExt>() {

			@Override
			public NotesItemDefinitionTableExt run() {
				return new NotesItemDefinitionTableExt();
			}});
	};
	
	protected List<String> getFieldOrder() {
		return Arrays.asList("Items", "ItemDefArray", "NumSegments", "ItemNameSegs", "ItemNameSegLengths");
	}
	
	/**
	 * @param items number of items in the table<br>
	 * @param itemDefArray Memory handle of ITEM_DEFINITION_EXT<br>
	 * structures<br>
	 * @param numSegments Number of non-null segments in<br>
	 * ItemNameSegs<br>
	 * @param itemNameSegs Segments of<br>
	 * packed text<br>
	 * C type : DHANDLE[MAX_ITEMDEF_SEGMENTS]<br>
	 * @param itemNameSegLengths Length of<br>
	 * each non-null text segment<br>
	 * C type : DWORD[MAX_ITEMDEF_SEGMENTS]
	 */
	public NotesItemDefinitionTableExt(int items, int itemDefArray, int numSegments, int itemNameSegs[], int itemNameSegLengths[]) {
		super();
		this.Items = items;
		this.ItemDefArray = itemDefArray;
		this.NumSegments = numSegments;
		if ((itemNameSegs.length != this.ItemNameSegs.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ItemNameSegs = itemNameSegs;
		if ((itemNameSegLengths.length != this.ItemNameSegLengths.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.ItemNameSegLengths = itemNameSegLengths;
	}
	
	public static NotesItemDefinitionTableExt newInstance(final int items, final int itemDefArray, final int numSegments, final int itemNameSegs[], final int itemNameSegLengths[]) {
		return AccessController.doPrivileged(new PrivilegedAction<NotesItemDefinitionTableExt>() {

			@Override
			public NotesItemDefinitionTableExt run() {
				return new NotesItemDefinitionTableExt(items, itemDefArray, numSegments, itemNameSegs, itemNameSegLengths);
			}});
	};
	
	public NotesItemDefinitionTableExt(Pointer peer) {
		super(peer);
	}
	
	public static NotesItemDefinitionTableExt newInstance(final Pointer peer) {
		return AccessController.doPrivileged(new PrivilegedAction<NotesItemDefinitionTableExt>() {

			@Override
			public NotesItemDefinitionTableExt run() {
				return new NotesItemDefinitionTableExt(peer);
			}});
	};

	public static class ByReference extends NotesItemDefinitionTableExt implements Structure.ByReference {
		
	};
	public static class ByValue extends NotesItemDefinitionTableExt implements Structure.ByValue {
		
	};
}
