package com.mindoo.domino.jna.internal.structs.collation;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.mindoo.domino.jna.internal.structs.BaseStructure;
import com.mindoo.domino.jna.internal.structs.NotesSchedEntryStruct;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NotesCollateDescriptorStruct extends BaseStructure {
	public byte Flags;
	/** Must be COLLATE_DESCRIPTOR_SIGNATURE */
	public byte signature;
	/** Type of key (COLLATE_TYPE_xxx) */
	public byte keytype;
	/** Offset to the name string */
	public short NameOffset;
	/** Length of the name string */
	public short NameLength;
	public NotesCollateDescriptorStruct() {
		super();
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static NotesCollateDescriptorStruct newInstance() {
		return AccessController.doPrivileged(new PrivilegedAction<NotesCollateDescriptorStruct>() {

			@Override
			public NotesCollateDescriptorStruct run() {
				return new NotesCollateDescriptorStruct();
			}
		});
	}

	protected List<String> getFieldOrder() {
		return Arrays.asList("Flags", "signature", "keytype", "NameOffset", "NameLength");
	}
	/**
	 * @param Flags flags
	 * @param signature Must be COLLATE_DESCRIPTOR_SIGNATURE<br>
	 * @param keytype Type of key (COLLATE_TYPE_xxx)<br>
	 * @param NameOffset Offset to the name string<br>
	 * @param NameLength Length of the name string
	 */
	public NotesCollateDescriptorStruct(byte Flags, byte signature, byte keytype, short NameOffset, short NameLength) {
		super();
		this.Flags = Flags;
		this.signature = signature;
		this.keytype = keytype;
		this.NameOffset = NameOffset;
		this.NameLength = NameLength;
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static NotesCollateDescriptorStruct newInstance(final byte Flags, final byte signature, final byte keytype, final short NameOffset, final short NameLength) {
		return AccessController.doPrivileged(new PrivilegedAction<NotesCollateDescriptorStruct>() {

			@Override
			public NotesCollateDescriptorStruct run() {
				return new NotesCollateDescriptorStruct(Flags, signature, keytype, NameOffset, NameLength);
			}
		});
	}

	public NotesCollateDescriptorStruct(Pointer peer) {
		super(peer);
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static NotesCollateDescriptorStruct newInstance(final Pointer p) {
		return AccessController.doPrivileged(new PrivilegedAction<NotesCollateDescriptorStruct>() {

			@Override
			public NotesCollateDescriptorStruct run() {
				return new NotesCollateDescriptorStruct(p);
			}
		});
	}

	public static class ByReference extends NotesCollateDescriptorStruct implements Structure.ByReference {
		
	};
	public static class ByValue extends NotesCollateDescriptorStruct implements Structure.ByValue {
		
	};
}
