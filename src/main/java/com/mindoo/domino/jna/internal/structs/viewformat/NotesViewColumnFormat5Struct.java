package com.mindoo.domino.jna.internal.structs.viewformat;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.mindoo.domino.jna.internal.structs.BaseStructure;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NotesViewColumnFormat5Struct extends BaseStructure {
	/** VIEW_COLUMN_FORMAT_SIGNATURE5 */
	public short Signature;
	/** sizeof this structure + any extra data. */
	public short dwLength;
	public int dwFlags;
	/** Length of programatic name of column that contains distiguished name. */
	public short wDistNameColLen;
	/** If shared column, length of the alias of the shared column */
	public short wSharedColumnAliasLen;
	/**
	 * Reserved for future use.<br>
	 * C type : DWORD[4]
	 */
	public int[] dwReserved = new int[4];
	public NotesViewColumnFormat5Struct() {
		super();
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static NotesViewColumnFormat5Struct newInstance() {
		return AccessController.doPrivileged(new PrivilegedAction<NotesViewColumnFormat5Struct>() {

			@Override
			public NotesViewColumnFormat5Struct run() {
				return new NotesViewColumnFormat5Struct();
			}
		});
	}

	protected List<String> getFieldOrder() {
		return Arrays.asList("Signature", "dwLength", "dwFlags", "wDistNameColLen", "wSharedColumnAliasLen", "dwReserved");
	}
	/**
	 * @param Signature VIEW_COLUMN_FORMAT_SIGNATURE5
	 * @param dwLength sizeof this structure + any extra data.
	 * @param dwFlags flags 
	 * @param wDistNameColLen Length of programatic name of column that contains distiguished name.
	 * @param wSharedColumnAliasLen If shared column, length of the alias of the shared column
	 * @param dwReserved Reserved for future use.
	 * C type : DWORD[4]
	 */
	public NotesViewColumnFormat5Struct(short Signature, short dwLength, int dwFlags, short wDistNameColLen, short wSharedColumnAliasLen, int dwReserved[]) {
		super();
		this.Signature = Signature;
		this.dwLength = dwLength;
		this.dwFlags = dwFlags;
		this.wDistNameColLen = wDistNameColLen;
		this.wSharedColumnAliasLen = wSharedColumnAliasLen;
		if ((dwReserved.length != this.dwReserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.dwReserved = dwReserved;
		setAlignType(Structure.ALIGN_NONE);
	}
	public NotesViewColumnFormat5Struct(Pointer peer) {
		super(peer);
		setAlignType(Structure.ALIGN_NONE);
	}
	
	public static NotesViewColumnFormat5Struct newInstance(final Pointer peer) {
		return AccessController.doPrivileged(new PrivilegedAction<NotesViewColumnFormat5Struct>() {

			@Override
			public NotesViewColumnFormat5Struct run() {
				return new NotesViewColumnFormat5Struct(peer);
			}
		});
	}

	public static class ByReference extends NotesViewColumnFormat5Struct implements Structure.ByReference {
		
	};
	public static class ByValue extends NotesViewColumnFormat5Struct implements Structure.ByValue {
		
	};
}
