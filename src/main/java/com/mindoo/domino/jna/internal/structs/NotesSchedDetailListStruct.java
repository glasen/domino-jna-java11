package com.mindoo.domino.jna.internal.structs;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NotesSchedDetailListStruct extends BaseStructure {
	/**
	 * Length of THIS header, in case it<br>
	 * ever grows, so that new items can be <br>
	 * easily skipped
	 */
	public short wHeaderLen;
	/**
	 * Length of THIS entire list and ALL of <br>
	 * its related data.
	 */
	public short wEntryLen;
	/** Number of entries that follow */
	public short wNumEntries;
	/** Offset from list start to TEXT_LIST */
	public short wOffsetItems;
	/** Offset from list start to SCHED_DETAIL_ENTRY */
	public short wOffsetDetails;
	/** SCHED_DETAIL_LIST_ATTR_xxx attributes */
	public byte Attr;
	/** Reserved space/padding for ODS */
	public byte bReserved;
	
	public NotesSchedDetailListStruct() {
		super();
	}
	
	public static NotesSchedDetailListStruct newInstance() {
		return AccessController.doPrivileged(new PrivilegedAction<NotesSchedDetailListStruct>() {

			@Override
			public NotesSchedDetailListStruct run() {
				return new NotesSchedDetailListStruct();
			}
		});
	}
	
	protected List<String> getFieldOrder() {
		return Arrays.asList("wHeaderLen", "wEntryLen", "wNumEntries", "wOffsetItems", "wOffsetDetails", "Attr", "bReserved");
	}
	/**
	 * @param wHeaderLen Length of THIS header, in case it<br>
	 * ever grows, so that new items can be <br>
	 * easily skipped<br>
	 * @param wEntryLen Length of THIS entire list and ALL of <br>
	 * its related data.<br>
	 * @param wNumEntries Number of entries that follow<br>
	 * @param wOffsetItems Offset from list start to TEXT_LIST<br>
	 * @param wOffsetDetails Offset from list start to SCHED_DETAIL_ENTRY<br>
	 * @param Attr SCHED_DETAIL_LIST_ATTR_xxx attributes<br>
	 * @param bReserved Reserved space/padding for ODS
	 */
	public NotesSchedDetailListStruct(short wHeaderLen, short wEntryLen, short wNumEntries, short wOffsetItems,
			short wOffsetDetails, byte Attr, byte bReserved) {
		super();
		this.wHeaderLen = wHeaderLen;
		this.wEntryLen = wEntryLen;
		this.wNumEntries = wNumEntries;
		this.wOffsetItems = wOffsetItems;
		this.wOffsetDetails = wOffsetDetails;
		this.Attr = Attr;
		this.bReserved = bReserved;
	}
	
	public static NotesSchedDetailListStruct newInstance(final short wHeaderLen, final short wEntryLen,
			final short wNumEntries, final short wOffsetItems,
			final short wOffsetDetails, final byte Attr, final byte bReserved) {
		return AccessController.doPrivileged(new PrivilegedAction<NotesSchedDetailListStruct>() {

			@Override
			public NotesSchedDetailListStruct run() {
				return new NotesSchedDetailListStruct(wHeaderLen, wEntryLen,
						wNumEntries, wOffsetItems,
						wOffsetDetails, Attr, bReserved);
			}
		});
	}
	
	public NotesSchedDetailListStruct(Pointer peer) {
		super(peer);
	}
	
	public static NotesSchedDetailListStruct newInstance(final Pointer peer) {
		return AccessController.doPrivileged(new PrivilegedAction<NotesSchedDetailListStruct>() {

			@Override
			public NotesSchedDetailListStruct run() {
				return new NotesSchedDetailListStruct(peer);
			}
		});
	}

	public static class ByReference extends NotesSchedDetailListStruct implements Structure.ByReference {
		
	};
	public static class ByValue extends NotesSchedDetailListStruct implements Structure.ByValue {
		
	};
}
