package com.mindoo.domino.jna.internal.structs;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.List;

import com.mindoo.domino.jna.internal.structs.BaseStructure;
import com.mindoo.domino.jna.internal.structs.NotesGlobalInstanceId64Struct;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class NotesSearchMatch64Struct extends BaseStructure {
	/**
	 * identity of the note within the file<br>
	 * C type : GLOBALINSTANCEID
	 */
	public NotesGlobalInstanceId64Struct ID;
	/**
	 * identity of the note in the<br>
	 * universe<br>
	 * C type : ORIGINATORID
	 */
	public NotesOriginatorIdStruct OriginatorID;
	/** class of the note */
	public short NoteClass;
	/** match indicator */
	public byte SERetFlags;
	/** note privileges */
	public byte Privileges;
	/** summary information length */
	public short SummaryLength;
	
	/**
	 * @deprecated only public to be used by JNA; use static newInstance method instead to run in AccessController.doPrivileged block
	 */
	@Deprecated
	public NotesSearchMatch64Struct() {
		super();
	}
	
	public static NotesSearchMatch64Struct newInstance() {
		return AccessController.doPrivileged(new PrivilegedAction<NotesSearchMatch64Struct>() {

			@Override
			public NotesSearchMatch64Struct run() {
				return new NotesSearchMatch64Struct();
			}
		});
	}
	
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList("ID", "OriginatorID", "NoteClass", "SERetFlags", "Privileges", "SummaryLength");
	}
	
	/**
	 * @param ID identity of the note within the file<br>
	 * C type : GLOBALINSTANCEID<br>
	 * @param OriginatorID identity of the note in the<br>
	 * universe<br>
	 * C type : ORIGINATORID<br>
	 * @param NoteClass class of the note<br>
	 * @param SERetFlags match indicator<br>
	 * @param Privileges note privileges<br>
	 * @param SummaryLength summary information length
	 * @deprecated only public to be used by JNA; use static newInstance method instead to run in AccessController.doPrivileged block
	 */
	@Deprecated
	public NotesSearchMatch64Struct(NotesGlobalInstanceId64Struct ID, NotesOriginatorIdStruct OriginatorID, short NoteClass, byte SERetFlags, byte Privileges, short SummaryLength) {
		super();
		this.ID = ID;
		this.OriginatorID = OriginatorID;
		this.NoteClass = NoteClass;
		this.SERetFlags = SERetFlags;
		this.Privileges = Privileges;
		this.SummaryLength = SummaryLength;
	}
	
	public static NotesSearchMatch64Struct newInstance(final NotesGlobalInstanceId64Struct ID, final NotesOriginatorIdStruct OriginatorID, final short NoteClass, final byte SERetFlags, final byte Privileges, final short SummaryLength) {
		return AccessController.doPrivileged(new PrivilegedAction<NotesSearchMatch64Struct>() {

			@Override
			public NotesSearchMatch64Struct run() {
				return new NotesSearchMatch64Struct(ID, OriginatorID, NoteClass, SERetFlags, Privileges, SummaryLength);
			}
		});
	}
	
	/**
	 * @deprecated only public to be used by JNA; use static newInstance method instead to run in AccessController.doPrivileged block
	 * 
	 * @param peer pointer
	 */
	@Deprecated
	public NotesSearchMatch64Struct(Pointer peer) {
		super(peer);
	}
	
	public static NotesSearchMatch64Struct newInstance(final Pointer p) {
		return AccessController.doPrivileged(new PrivilegedAction<NotesSearchMatch64Struct>() {

			@Override
			public NotesSearchMatch64Struct run() {
				return new NotesSearchMatch64Struct(p);
			}
		});
	}
	
	public static class ByReference extends NotesSearchMatch64Struct implements Structure.ByReference {
		
	};
	
	public static class ByValue extends NotesSearchMatch64Struct implements Structure.ByValue {
		
	};
}
