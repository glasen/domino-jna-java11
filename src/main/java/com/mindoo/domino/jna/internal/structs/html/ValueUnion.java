package com.mindoo.domino.jna.internal.structs.html;
import java.security.AccessController;
import java.security.PrivilegedAction;

import com.mindoo.domino.jna.internal.structs.NoteIdStruct;
import com.mindoo.domino.jna.internal.structs.NotesUniversalNoteIdStruct;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;

/**
 * <i>native declaration : line 2</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ValueUnion extends Union {
	/** When Type == CAVT_Int,		value as int */
	public int n;
	/**
	 * When Type == CAVT_NoteId,	value as NOTEID<br>
	 * C type : NOTEID
	 */
	public NoteIdStruct nid;
	/**
	 * When Type == CAVT_UNID,		value as UNID<br>
	 * C type : UNID
	 */
	public NotesUniversalNoteIdStruct unid;
	/**
	 * When Type == CAVT_String,	value as nul-terminated string<br>
	 * C type : char*
	 */
	public Pointer name;
	/**
	 * When Type == CAVT_StringList,value is list of NULL terminated strings.<br>
	 * C type : slist_struct
	 */
	public StringListStruct slist;
	/** <i>native declaration : line 8</i> */
	
	public ValueUnion() {
		super();
	}

	public static ValueUnion newInstance() {
		return AccessController.doPrivileged(new PrivilegedAction<ValueUnion>() {

			@Override
			public ValueUnion run() {
				return new ValueUnion();
			}
		});
	}

	
	/**
	 * @param unid When Type == CAVT_UNID,		value as UNID<br>
	 * C type : UNID
	 */
	public ValueUnion(NotesUniversalNoteIdStruct unid) {
		super();
		this.unid = unid;
		setType(NotesUniversalNoteIdStruct.class);
	}
	
	public static ValueUnion newInstance(final NotesUniversalNoteIdStruct unid) {
		return AccessController.doPrivileged(new PrivilegedAction<ValueUnion>() {

			@Override
			public ValueUnion run() {
				return new ValueUnion(unid);
			}
		});
	}

	
	/**
	 * @param slist When Type == CAVT_StringList,value is list of NULL terminated strings.<br>
	 * C type : slist_struct
	 */
	public ValueUnion(StringListStruct slist) {
		super();
		this.slist = slist;
		setType(StringListStruct.class);
	}
	
	public static ValueUnion newInstance(final StringListStruct slist) {
		return AccessController.doPrivileged(new PrivilegedAction<ValueUnion>() {

			@Override
			public ValueUnion run() {
				return new ValueUnion(slist);
			}
		});
	}

	/**
	 * @param s When Type == CAVT_String,	value as nul-terminated string<br>
	 * C type : char*
	 */
	public ValueUnion(Pointer s) {
		super();
		this.name = s;
		setType(Pointer.class);
	}

	public static ValueUnion newInstance(final Pointer s) {
		return AccessController.doPrivileged(new PrivilegedAction<ValueUnion>() {

			@Override
			public ValueUnion run() {
				return new ValueUnion(s);
			}
		});
	}

	
	public ValueUnion(NoteIdStruct nid) {
		super();
		this.nid = nid;
		setType(NoteIdStruct.class);
	}
	
	public static ValueUnion newInstance(final NoteIdStruct nid) {
		return AccessController.doPrivileged(new PrivilegedAction<ValueUnion>() {

			@Override
			public ValueUnion run() {
				return new ValueUnion(nid);
			}
		});
	}

	
	/** @param n When Type == CAVT_Int,		value as int */
	public ValueUnion(int n) {
		super();
		this.n = n;
		setType(Integer.TYPE);
	}

	public static ValueUnion newInstance(final int n) {
		return AccessController.doPrivileged(new PrivilegedAction<ValueUnion>() {

			@Override
			public ValueUnion run() {
				return new ValueUnion(n);
			}
		});
	}

	public static class ByReference extends ValueUnion implements Structure.ByReference {
		
	};
	public static class ByValue extends ValueUnion implements Structure.ByValue {
		
	};
}
